#summary M3 structs.

= Introduction =

These are the structures found so far in the .m3 files.


= Details =

{{{
// Size = 8 byte / 0x08 byte
// Complete
struct Reference 
{
    /*0x00*/ uint32 nEntries;
    /*0x04*/ uint32 ref;
};

// Size = 16 byte / 0x10 byte
// Incomplete
struct ReferenceEntry 
{ 
    /*0x00*/ char id[4]; 
    /*0x04*/ uint32 offset; 
    /*0x08*/ uint32 nEntries; 
    /*0x0C*/ uint32 d1; // Possibly nReferences;
};

// Size = 8 Byte / 0x08 byte
// Incomplete
struct AnimationReference
{
    /*0x00*/ uint16 flags; //usually 1
    /*0x02*/ uint16 animflag; //6 indicates animation data present
    /*0x04*/ uint32 animid; //a unique uint32 value referenced in STC.animid and STS.animid
};

// Size = 20 byte / 0x14 byte
// Complete
struct MD33
{ 
    /*0x00*/ char id[4]; 
    /*0x04*/ uint32 ofsRefs; 
    /*0x08*/ uint32 nRefs; 
    /*0x0C*/ Reference MODL; 
};

// Size = 156 byte / 0x9C byte
// Incomplete
struct BONE
{
    /*0x00*/ int32 d1; // Keybone?
    /*0x04*/ Reference name;
    /*0x0C*/ uint32 flags; //2560 = Weighted vertices rendered, 512 = not rendered
    /*0x10*/ int16 parent;
    /*0x12*/ uint16 s1;
    /*0x14*/ AnimationReference transid; //unique animation ID ref
    /*0x1C*/ VEC3 pos; //bone position is relative to parent bone and its rotation
    /*0x28*/ int32 d2[4];
    /*0x38*/ AnimationReference rotid;
    /*0x40*/ QUAT rot; //initial bone rotation
    /*0x50*/ int32 d3[3];
    /*0x5C*/ float f1;
    /*0x60*/ int32 d4;
    /*0x64*/ AnimationReference scaleid;
    /*0x6C*/ VEC3 scale; //initial scale
    /*0x78*/ VEC3 v1;
    /*0x84*/ int32 d5[6];
    //appears to have another animation ref at 0x8C but not sure what for
};

// Size = 14 byte / 0x0E byte
// Incomplete
struct BAT
{
    /*0x00*/ uint32 d1;
    /*0x04*/ uint16 subid; //REGN index
    /*0x06*/ uint16 s1[2];
    /*0x0A*/ uint16 matid; //MATM index (MATM is a material lookup table)
    /*0x0C*/ int16 s2; //usually -1
};

// Size = 8 byte / 0x08 byte
// Complete
struct MATM
{
    /*0x00*/ uint32 nmat; //usually only 1
    /*0x04*/ uint32 matind; //MAT index
};

// Size = 212 bytes / 0xD4 bytes
// Incomplete
struct MAT
{
    Reference name;
    int ukn1[8];
    float x, y;
    Reference layers[13];//0 - Diffuse, 1 - Decal, 2 - Specular, 3 - Emissive, 9 - Normal
    int ukn2[15];
};

// Size = 352 bytes / 0x160 bytes
// Incomplete
struct LAYR
{
    int unk;
    Reference name;
    float unk2[85];
};

// Size = 32 byte / 0x20 byte
// Incomplete
struct DIV
{
    /*0x00*/ Reference U16; // Might be triangles?
    /*0x08*/ Reference REGN;
    /*0x10*/ Reference BAT;
    /*0x18*/ Reference MSEC;
};

// Size = 176 byte / 0xB0 byte
// Incomplete
struct CAM
{
    /*0x00*/ int32 d1;
    /*0x04*/ Reference name;
    /*0x0C*/ uint16 flags1;
    /*0x0E*/ uint16 flags2;
};

// Size = 388 byte / 0x184 byte
// Incomplete
struct PROJ
{
};

// Size = 96 byte/ 0x60 byte
// Incomplete
struct EVNT
{
    /*0x00*/ Reference name;
    /*0x08*/ int16 unk1[4];
    /*0x10*/ float matrix[4][4];
    /*0x50*/ int32 unk2[4];
};

// Size = 16 byte / 0x10 byte
// Incomplete
struct ATT
{
    /*0x00*/ int32 unk;
    /*0x04*/ Reference name;
    /*0x0C*/ int32 bone;
};

// Size = 24 byte / 0x18 byte
// Complete
struct SD
{
    /*0x00*/ Reference timeline;
    /*0x08*/ uint32 flags;
    /*0x0C*/ uint32 length;
    /*0x08*/ Reference data;
};

// Size = 88 byte / 0x58 byte
// Incomplete
struct SEQS
{
    /*0x00*/ int32 d1;
    /*0x04*/ int32 d2;
    /*0x08*/ Reference name;
    /*0x10*/ int32 d3;
    /*0x14*/ int32 length;
    /*0x18*/ int32 d4;
    /*0x1C*/ uint32 flags;
    /*0x20*/ int32 unk[5];
    /*0x34*/ Vec3D extents[2];
    /*0x4C*/ float radius;
    /*0x50*/ int32 d5;
    /*0x54*/ int32 d6;
};

// Size = 4 byte / 0x04 byte
// Incomplete
struct AnimationIndex
{
    /*0x00*/ uint16 aind; //anim ind in seq data
    /*0x02*/ uint16 sdind; //seq data array index
};

// Size = 140 byte / 0x8C byte
// Incomplete
struct STC
{
    /*0x00*/ Reference name;
    /*0x08*/ uint32 d1;
    /*0x0C*/ uint16 indSEQ[2]; //points to animation in SEQS chunk, twice for some reason
    /*0x10*/ Reference animid; //list of unique uint32s used in chunks with animation. The index of these correspond with the data in the next reference.
    /*0x18*/ Reference animindex; //lookup table, connects animid with it's animation data, nEntries of AnimationIndex reference using U32_ id
    /*0x20*/ uint32 d2;
    /*0x24*/ Reference SeqData[13]; //SD3V - Trans, SD4Q - Rotation, SDR3 - Scale?, SDFG - Flags, SDMB - Bounding Boxes?
};

// Size = 24 byte / 0x18 byte
// Incomplete
struct STS
{
    /*0x00*/ Reference animid; // uint32
    /*0x08*/ int32 unk[3];
    /*0x14*/ int16 s1;
    /*0x16*/ int16 s2;
};

// Size = 16 byte / 0x10 byte
// Complete
struct STG
{
    /*0x00*/ Reference name;
    /*0x08*/ Reference stcID;
};

// Size = 56 byte / 0x38 byte
// Incomplete
struct BNDS
{
    /*0x00*/ Vec3D extents1[2];
    /*0x18*/ float radius1;
    /*0x1C*/ Vec3D extents2[2];
    /*0x34*/ float radius2;
};

struct VEC2
{
    float x, y;
};

struct VEC3
{
    float x, y, z;
};

struct VEC4
{
    float x, y, z, w;
};

struct QUAT
{
    float, x, y, z, w;
};
}}}